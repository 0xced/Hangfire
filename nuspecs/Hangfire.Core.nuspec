<?xml version="1.0"?>
<package >
  <metadata>
    <id>Hangfire.Core</id>
    <version>0.0.0</version>
    <title>Hangfire Core Components</title>
    <authors>Sergey Odinokov</authors>
    <owners>odinserj</owners>
    <projectUrl>https://www.hangfire.io/</projectUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <licenseUrl>https://raw.github.com/HangfireIO/Hangfire/master/LICENSE.md</licenseUrl>
    <summary>An easy way to perform fire-and-forget, delayed and recurring tasks inside ASP.NET applications. No Windows Service required.</summary>
    <description>
      An easy and reliable way to perform fire-and-forget, delayed and recurring long-running, short-running, CPU or I/O intensive tasks inside ASP.NET application. No Windows Service / Task Scheduler required. Even ASP.NET is not required.
      Backed by Redis, SQL Server, SQL Azure or MSMQ. This is a .NET alternative to Sidekiq, Resque and Celery.
      https://www.hangfire.io/
    </description>
    <copyright>Copyright © 2013-2019 Sergey Odinokov</copyright>
    <tags>Hangfire OWIN Long-Running Background Fire-And-Forget Delayed Recurring Tasks Jobs Scheduler Threading Queues</tags>
    <releaseNotes>https://www.hangfire.io/blog/

1.7.0-beta3
• Added – Multi-stage shutdown to wait for graceful completion before starting to abort jobs.
• Added – Asynchronous checks for job cancellation, `IJobCancellationToken` can be replaced with `CancellationToken` (by @pieceofsummer).
• Added – Possibility to create millions of recurring jobs without stressing the scheduler.
• Added – Second-based recurring jobs are fully supported now with 6-part cron expressions.
• Added – Support for custom `TimeZoneInfo` resolvers in recurring jobs for interoperability purposes.
• Added – Package now explicitly targets .NET Standard 2.0, and .NET Framework 4.6 target added as well.
• Added – Type roundtrip support between .NET Core and .NET Framework for most common types.
• Added – Allow to specify queue names based on job arguments with `QueueAttribute` via patterns.
• Added – `PerformContext.Storage` property to allow server filters to spawn connections.
• Added – `GetFirstByLowestScoreFromSet` connection method overload that returns multiple items (by @cdschneider).
• Changed – New type serialization is disabled by default for compatibility reasons.
• Changed – Cronos package upgraded to 0.7.0 and internalized even on .NET Standard platforms.
• Changed – Replace Rickshaw with Chart.js to have beautiful charts with less headache.
• Changed – `DelayedJobScheduler` is able to use the new storage method to query multiple jobs at once.
• Changed – `RecurringJobScheduler` now uses index-based checks to fetch only those jobs that should be scheduled.
• Fixed – `ArgumentNullException` when job class contains method with non-resolvable generic arguments.
• Fixed – Re-add missing fonts as embedded resources due to a regression appeared in 1.7.0-beta2.
• Fixed – "Failed to initialize CoreCLR" error, by removing reference to `Microsoft.NETCore.Portable.Compatibility`.
• Fixed – Possible race conditions in `RecurringJobScheduler` that may lead to job duplicates.
• Fixed – Configuration inconsistency introduced in 1.6.18 leading to issues with custom `JobActivator`.
• Fixed – Backward compatibility issue with type serialization when `TypeNameHandling.All` is used.
• Fixed – Triggering the recurring task doesn't update its last execution time.
• Fixed – Recurring job which don't have next execution (intentionally or not) don't cause exception.
• Fixed – Dashboard recurring jobs sorting is random (now it's based on next execution time).
• Fixed – Performance problems with huge amount of recurring jobs.
• Fixed – NextExecution field of a recurring job has delay in value getting set.
• Fixed – Dashboard graphs have improper sizing.
• Ported – Merged updates from version 1.6.21 and 1.6.22.
    
1.7.0-beta2
• Fixed – `MissingMethodException` when using Newtonsoft.Json 11 in .NET Core 2.X with continuations (by @pieceofsummer).
• Ported – Merged updates from versions 1.6.18 – 1.6.20.
    
1.7.0-beta1
• Added – Entry point for custom job naming strategies available for dashboard (by @pieceofsummer).
• Added – JobDisplayNameAttribute class for displaying jobs in dashboard, available on .NET Core (by @pieceofsummer).
• Added – Support async jobs returning ValueTask&lt;T&gt; and other await-compatible types (by @pieceofsummer).
• Added – Support for asynchronous background processes, opens the road toward async storage.
• Added – Circuit breaker pattern for background processes to reduce the logging pressure.
• Added – Processing server is now able to detect it was expired, and restart itself with the new id.
• Added – Ability to use custom delays for automatic retries of a background job.
• Added – ThreadAbortException and ThreadInterruptedException handling to keep the background process running.
• Added – Support for complex Cron expressions, including the `L`, `W`, `#` characters.
• Added – JobActivator.BeginScope method overload with the full PerformContext (by @jeroenvervaeke).
• Added – Support for read-only view for dashboard (by @mikechamberlain).
• Added – Storage property to control the job expiration time (by @rsilvanet).
• Changed – Decrease the size of serialized payloads and remove version information.
• Fixed – Server disappears from the list, but still performing the background processing.
• Fixed – Logging is too aggressive on transient errors.
• Fixed – Daylight saving time transitions now handled perfectly in recurring jobs thanks to Cronos.
• Fixed – Confusing Cron scheduling, when both day-of-week and day-of-month fields set.
    </releaseNotes>
    <dependencies>
      <group targetFramework="net45">
        <dependency id="Owin" version="1.0" />
        <dependency id="Newtonsoft.Json" version="5.0.1" />
      </group>
      <group targetFramework="net46">
        <dependency id="Owin" version="1.0" />
        <dependency id="Newtonsoft.Json" version="5.0.1" />
      </group>
      <group targetFramework="netstandard1.3">
        <dependency id="NETStandard.Library" version="1.6.0" />
        <dependency id="System.Threading.Thread" version="4.0.0" />
        <dependency id="System.Threading.ThreadPool" version="4.0.10" />
        <dependency id="Newtonsoft.Json" version="9.0.1" />
      </group>
      <group targetFramework="netstandard2.0">
        <dependency id="Newtonsoft.Json" version="11.0.1" />
      </group>
    </dependencies>
  </metadata>
  <files>
    <file src="net45\Hangfire.Core.dll" target="lib\net45" />
    <file src="net45\Hangfire.Core.xml" target="lib\net45" />
    <file src="net45\Hangfire.Core.pdb" target="lib\net45" />

    <file src="net45\**\Hangfire.Core.resources.dll" target="lib\net45" />

    <file src="net46\Hangfire.Core.dll" target="lib\net46" />
    <file src="net46\Hangfire.Core.xml" target="lib\net46" />
    <file src="net46\Hangfire.Core.pdb" target="lib\net46" />

    <file src="net46\**\Hangfire.Core.resources.dll" target="lib\net46" />
    
    <file src="netstandard1.3\Hangfire.Core.dll" target="lib\netstandard1.3" />
    <file src="netstandard1.3\Hangfire.Core.xml" target="lib\netstandard1.3" />
    <file src="netstandard1.3\Hangfire.Core.pdb" target="lib\netstandard1.3" />

    <file src="netstandard1.3\**\Hangfire.Core.resources.dll" target="lib\netstandard1.3" />

    <file src="netstandard2.0\Hangfire.Core.dll" target="lib\netstandard2.0" />
    <file src="netstandard2.0\Hangfire.Core.xml" target="lib\netstandard2.0" />
    <file src="netstandard2.0\Hangfire.Core.pdb" target="lib\netstandard2.0" />

    <file src="netstandard2.0\**\Hangfire.Core.resources.dll" target="lib\netstandard2.0" />
    
    <file src="..\src\Hangfire.Core\**\*.cs;..\src\Hangfire.Core\**\*.cshtml" target="src" exclude="**\obj*\**\*.cs" />

    <file src="LICENSE.md" />
    <file src="NOTICES" />
    <file src="COPYING" />
    <file src="COPYING.LESSER" />
    <file src="LICENSE_STANDARD" />
    <file src="LICENSE_ROYALTYFREE" />
  </files>
</package>