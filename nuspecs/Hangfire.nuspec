<?xml version="1.0"?>
<package >
  <metadata>
    <id>Hangfire</id>
    <version>0.0.0</version>
    <title>Hangfire</title>
    <authors>Sergey Odinokov</authors>
    <owners>odinserj</owners>
    <projectUrl>https://www.hangfire.io/</projectUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <licenseUrl>https://raw.github.com/HangfireIO/Hangfire/master/LICENSE.md</licenseUrl>
    <summary>An easy way to perform fire-and-forget, delayed and recurring tasks inside ASP.NET applications. No Windows Service required.</summary>
    <description>
      An easy and reliable way to perform fire-and-forget, delayed and recurring long-running, short-running, CPU or I/O intensive tasks inside ASP.NET application. No Windows Service / Task Scheduler required. Even ASP.NET is not required.
      Backed by Redis, SQL Server, SQL Azure or MSMQ. This is a .NET alternative to Sidekiq, Resque and Celery.
      https://www.hangfire.io/
    </description>
    <copyright>Copyright © 2013-2019 Sergey Odinokov</copyright>
    <tags>Hangfire AspNet MVC AspNetCore SqlServer Long-Running Background Fire-And-Forget Delayed Recurring Tasks Jobs Scheduler Threading Queues</tags>
    <releaseNotes>https://www.hangfire.io/blog/

1.7.0-rc1

Hangfire.Core

• Added – Expose the IGlobalConfiguration.SetDataCompatibilityLevel method.
• Added – Allow to specify custom TaskScheduler for processing server.
• Added – You can use dynamically loaded assemblies now using the default type resolver.
• Added – Add IGlobalConfiguration.UseRecommendedSerializerSettings method.
• Changed – Split serializing to internal and user scopes to isolate them (CompatibilityLevel).
• Changed – Use more compact representation of dates when using SerializeDateTime (CompatibilityLevel).
• Changed – Stop special casing DateTime argument serialization in Version_170 (CompatibilityLevel).
• Changed – Specify parameter type when serializing arguments, TypeNameHandling.Auto is now great.
• Fixed – Log an error, when all the state change attempts failed due to an exception (Backport).
• Fixed – Make SucceededState constructor public to allow state serialization (Backport).
• Fixed – Ensure RecurringJobScheduler doesn't go into infinite loop when there's an old server.
• Fixed – Don't allow to affect internal serialization settings even by JsonConvert.DefaultSettings.
• Fixed – Queue async continuations back to the worker thread.
• Fixed – Implement BackgroundTaskScheduler.MaximumConcurrencyLevel property.
• Fixed – AwaitingState dashboard renderer to display options as string
• Fixed – Don't serialize arguments multiple times when showing a job (Backport).
• Fixed – DateTimeOffset conversion error when it was serialized with TypeConverter (Backport).
• Fixed – Remove duplicate of argument deserialization code for obsolete class (Backport).
• Fixed – Decorate all the exceptions with the SerializableAttribute (Backport).
• Project – Add DataCompatibilityRangeFact and DataCompatibilityRangeTheory classes for compatibility checks.
• Project – Reduce the test execution time by removing unnecessary waits.
• Ported – Merged updates from version 1.6.23.

Hangfire.AspNetCore
• Changed – Remove services that are inconsistent with server options (list them and backport).
• Ported – Merged updates from version 1.6.23.

Hangfire.SqlServer

• Added – Migration for Schema 7 to fix the IX_HangFire_Set_Score index to include the `Key` column.
• Changed – Store arguments in the corresponding column in SQL Server again (differ in betas).
• Changed – Continue to use global locks by default in SQL Server storage (differ in betas).
• Changed – Bring ExpirationManager and CountersAggregator to their previous state (differ in betas).
• Changed – Monitoring API doesn't check state data to see state transition time (Backport).
• Fixed – Cannot resolve the collation conflict in CountersAggregator (Backport).
• Ported – Merged updates from version 1.6.23.

1.7.0-beta4

Hangfire.Core

• Changed – `StopTimeout` introduced in 1.7.0-beta3 now defaults to zero seconds.
• Fixed – `NotSupportedException` thrown by `RecurringJobScheduler` (regression).
• Fixed – `NotSupportedException` thrown by `DelayedJobScheduler` (regression).
• Fixed – `RecurringJobManager.AddOrUpdate` method doesn't preserve `LastJobId` (regression).
• Fixed – Cache results of the `IsBatchingAvailable` method per connection type.

1.7.0-beta3

Hangfire.Core

• Added – Multi-stage shutdown to wait for graceful completion before starting to abort jobs.
• Added – Asynchronous checks for job cancellation, `IJobCancellationToken` can be replaced with `CancellationToken` (by @pieceofsummer).
• Added – Possibility to create millions of recurring jobs without stressing the scheduler.
• Added – Second-based recurring jobs are fully supported now with 6-part cron expressions.
• Added – Support for custom `TimeZoneInfo` resolvers in recurring jobs for interoperability purposes.
• Added – Package now explicitly targets .NET Standard 2.0, and .NET Framework 4.6 target added as well.
• Added – Type roundtrip support between .NET Core and .NET Framework for most common types.
• Added – Allow to specify queue names based on job arguments with `QueueAttribute` via patterns.
• Added – `PerformContext.Storage` property to allow server filters to spawn connections.
• Added – `GetFirstByLowestScoreFromSet` connection method overload that returns multiple items (by @cdschneider).
• Changed – New type serialization is disabled by default for compatibility reasons.
• Changed – Cronos package upgraded to 0.7.0 and internalized even on .NET Standard platforms.
• Changed – Replace Rickshaw with Chart.js to have beautiful charts with less headache.
• Changed – `DelayedJobScheduler` is able to use the new storage method to query multiple jobs at once.
• Changed – `RecurringJobScheduler` now uses index-based checks to fetch only those jobs that should be scheduled.
• Fixed – `ArgumentNullException` when job class contains method with non-resolvable generic arguments.
• Fixed – Re-add missing fonts as embedded resources due to a regression appeared in 1.7.0-beta2.
• Fixed – "Failed to initialize CoreCLR" error, by removing reference to `Microsoft.NETCore.Portable.Compatibility`.
• Fixed – Possible race conditions in `RecurringJobScheduler` that may lead to job duplicates.
• Fixed – Configuration inconsistency introduced in 1.6.18 leading to issues with custom `JobActivator`.
• Fixed – Backward compatibility issue with type serialization when `TypeNameHandling.All` is used.
• Fixed – Triggering the recurring task doesn't update its last execution time.
• Fixed – Recurring job which don't have next execution (intentionally or not) don't cause exception.
• Fixed – Dashboard recurring jobs sorting is random (now it's based on next execution time).
• Fixed – Performance problems with huge amount of recurring jobs.
• Fixed – NextExecution field of a recurring job has delay in value getting set.
• Fixed – Dashboard graphs have improper sizing.
• Ported – Merged updates from version 1.6.21 and 1.6.22.

Hangfire.AspNetCore

• Added – Full .NET Core 2.0 support by explicitly targeting .NET Standard 2.0.
• Added – An overloaded AddHangfire method with `IServiceProvider` parameter (by @ericgreenmix and @denis-ivanov).
• Added – `BackgroundJobServerHostedService` class based on `IHostedService` interface.
• Added – `IServiceCollection.AddHangfireServer` method to register the server during configuration.

Hangfire.SqlServer

• Changed – Short paths for the CreateExpiredJob method to avoid some round-trips.
• Changed – Allow to use zero-based poll interval when sliding invisibility timeout.
• Changed – Set `SqlParameter` types explicitly to not to duplicate query plans.
• Changed – Batch support for `AddToQueue` method when default provider is used.
• Changed – Check `FetchedAt` has expected value to prevent prolonging others' work.
• Changed – Use more recent Dapper 1.50.7 on all platforms except .NET Framework 4.5.
• Changed – Dapper package is internalized now even on .NET Core to avoid possible conflicts.
• Ported – Merged updates from version 1.6.21 and 1.6.22.
      
1.7.0-beta2

Hangfire.Core

• Fixed – `MissingMethodException` when using Newtonsoft.Json 11 in .NET Core 2.X with continuations (by @pieceofsummer).
• Ported – Merged updates from versions 1.6.18 – 1.6.20.

Hangfire.SqlServer

• Added – Blocking fetch support for sliding expiration-based fetch to avoid excessive polling.
• Changed – Optimize sliding-expiration-based fetching to use even less CPU time.
• Changed – Use write reordering and fine-grained locking scheme to improve parallelism.
• Ported – Merged updates from versions 1.6.18 – 1.6.20.
    
1.7.0-beta1

Hangfire.Core

• Added – Entry point for custom job naming strategies available for dashboard (by @pieceofsummer).
• Added – JobDisplayNameAttribute class for displaying jobs in dashboard, available on .NET Core (by @pieceofsummer).
• Added – Support async jobs returning ValueTask&lt;T&gt; and other await-compatible types (by @pieceofsummer).
• Added – Support for asynchronous background processes, opens the road toward async storage.
• Added – Circuit breaker pattern for background processes to reduce the logging pressure.
• Added – Processing server is now able to detect it was expired, and restart itself with the new id.
• Added – Ability to use custom delays for automatic retries of a background job.
• Added – ThreadAbortException and ThreadInterruptedException handling to keep the background process running.
• Added – Support for complex Cron expressions, including the `L`, `W`, `#` characters.
• Added – JobActivator.BeginScope method overload with the full PerformContext (by @jeroenvervaeke).
• Added – Support for read-only view for dashboard (by @mikechamberlain).
• Added – Storage property to control the job expiration time (by @rsilvanet).
• Changed – Decrease the size of serialized payloads and remove version information.
• Fixed – Server disappears from the list, but still performing the background processing.
• Fixed – Logging is too aggressive on transient errors.
• Fixed – Daylight saving time transitions now handled perfectly in recurring jobs thanks to Cronos.
• Fixed – Confusing Cron scheduling, when both day-of-week and day-of-month fields set.

Hangfire.SqlServer

* Added – Migration for Schema 6 to use...
• Added – Callback method to allow to open the database with impersonation (by @BjoernHund).
• Changed – Identity columns either converted to the `bigint` type, or entirely removed.
• Changed – Clustered indexes were organized according to the access patterns of their tables.
• Changed – Most of secondary indexes were either removed or made filtered.
• Fixed – Background processing stops when identity columns exceed the `Int32.MaxValue`.
• Fixed – Slowdown of scheduled jobs due to the missing index on the [Set] table.
    </releaseNotes>
    <dependencies>
      <group targetFramework="net45">
        <dependency id="Hangfire.Core" version="[0.0.0]" />
        <dependency id="Hangfire.SqlServer" version="[0.0.0]" />
        <dependency id="Microsoft.Owin.Host.SystemWeb" version="3.0.0" />
      </group>
      <group targetFramework="netstandard1.3">
        <dependency id="Hangfire.Core" version="[0.0.0]" />
        <dependency id="Hangfire.SqlServer" version="[0.0.0]" />
        <dependency id="Hangfire.AspNetCore" version="[0.0.0]" />
      </group>
      <group targetFramework="netstandard2.0">
        <dependency id="Hangfire.Core" version="[0.0.0]" />
        <dependency id="Hangfire.SqlServer" version="[0.0.0]" />
        <dependency id="Hangfire.AspNetCore" version="[0.0.0]" />
      </group>
    </dependencies>
  </metadata>
  <files>
    <file src="Content\readme.txt" target="readme.txt" />
  </files>
</package>
